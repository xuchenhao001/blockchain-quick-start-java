---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "sample-network"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"
x-loggingLevel: info

#
# Describe what the target network is/does.
#
description: "The sample network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: Org1

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  credentialStore:
    # [Optional]. Specific to FileKeyValueStore.js or similar implementations in other SDKs. Can be others
    # if using an alternative impl. For instance, CouchDBKeyValueStore.js would require an object
    # here for properties like url, db name, etc.
    path: "/tmp/fabric-client/kv-org1"

    # [Optional]. Specific to the CryptoSuite implementation. Software-based implementations like
    # CryptoSuite_ECDSA_AES.js in node SDK requires a key store. PKCS#11 based implementations does
    # not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      path: "/tmp/fabric-client/kv-org1"

channels:
  mychannel:
    orderers:
    - orderer.example.com
    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      peer0.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: false

      peer1.org2.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: false

#      peer0.org3.example.com:
#        endorsingPeer: true
#        chaincodeQuery: false
#        ledgerQuery: true
#        eventSource: false
#
#      peer1.org3.example.com:
#        endorsingPeer: true
#        chaincodeQuery: false
#        ledgerQuery: true
#        eventSource: false

    chaincodes:
    - mycc:1.0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
    - peer0.org1.example.com
    - peer1.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
    - ca-org1

    # [Optional]. If the application is going to make requests that are reserved to organization
    # administrators, including creating/updating channels, installing/instantiating chaincodes, it
    # must have access to the admin identity represented by the private key and signing certificate.
    # Both properties can be the PEM string or local path to the PEM file. Note that this is mainly for
    # convenience in development mode, production systems should not expose sensitive information
    # this way. The SDK should allow applications to set the org admin identity via APIs, and only use
    # this route as an alternative when it exists.
    adminPrivateKey:
      pem: "ORG1_PRIVATE_KEY"
    signedCert:
      pem: "ORG1_SIGN_CERT"

  # the profile will contain public information about organizations other than the one it belongs to.
  # These are necessary information to make transaction lifecycles work, including MSP IDs and
  # peers with a public URL to send transaction proposals. The file will not contain private
  # information reserved for members of the organization, such as admin key and certificate,
  # fabric-ca registrar enroll ID and secret, etc.
  Org2:
    mspid: Org2MSP
    peers:
    - peer0.org2.example.com
    - peer1.org2.example.com
    certificateAuthorities:
    - ca-org2
    adminPrivateKey:
      pem: "ORG2_PRIVATE_KEY"
    signedCert:
      pem: "ORG2_SIGN_CERT"
#  Org3:
#    mspid: Org3MSP
#    peers:
#    - peer0.org3.example.com
#    - peer1.org3.example.com
#    certificateAuthorities:
#    - ca-org3
#    adminPrivateKey:
#      pem: "ORG3_PRIVATE_KEY"
#    signedCert:
#      pem: "ORG3_SIGN_CERT"

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://orderer.example.com:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      hostnameOverride: orderer.example.com

    tlsCACerts:
      pem: "ORDERER_TLS"

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: grpcs://peer0.org1.example.com:7051

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpcs://peer0.org1.example.com:7053

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      hostnameOverride: peer0.org1.example.com

    tlsCACerts:
      # Comma-Separated list of paths
      pem: "PEER0_ORG1_TLS"

  peer1.org1.example.com:
    url: grpcs://peer1.org1.example.com:8051
    eventUrl: grpcs://peer1.org1.example.com:7053
    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      hostnameOverride: peer1.org1.example.com
    tlsCACerts:
      # Comma-Separated list of paths
      pem: "PEER1_ORG1_TLS"

  peer0.org2.example.com:
    url: grpcs://peer0.org2.example.com:9051
    eventUrl: grpcs://peer0.org2.example.com:7053
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      hostnameOverride: peer0.org2.example.com
    tlsCACerts:
      pem: "PEER0_ORG2_TLS"

  peer1.org2.example.com:
    url: grpcs://peer1.org2.example.com:10051
    eventUrl: grpcs://peer1.org2.example.com:7053
    grpcOptions:
      ssl-target-name-override: peer1.org2.example.com
      hostnameOverride: peer1.org2.example.com
    tlsCACerts:
      pem: "PEER1_ORG2_TLS"

#  peer0.org3.example.com:
#    url: grpcs://peer0.org3.example.com:7051
#    eventUrl: grpcs://peer0.org3.example.com:7053
#    grpcOptions:
#      ssl-target-name-override: peer0.org3.example.com
#      hostnameOverride: peer0.org3.example.com
#    tlsCACerts:
#      pem: "PEER0_ORG3_TLS"
#
#  peer1.org3.example.com:
#    url: grpcs://peer1.org3.example.com:7051
#    eventUrl: grpcs://peer1.org3.example.com:7053
#    grpcOptions:
#      ssl-target-name-override: peer1.org3.example.com
#      hostnameOverride: peer1.org3.example.com
#    tlsCACerts:
#      pem: "PEER1_ORG3_TLS"

#
# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: https://ca.org1.example.com:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false
    tlsCACerts:
      # Comma-Separated list of paths
      pem: "CA_ORG1_TLS"
      # Client key and cert for TLS mutual auth with Fabric CA. If the target Fabric CA server
      # does not have TLS mutual auth turned on, then this section is not needed
      # client:
      #   keyfile: path/to/tls/fabricca/certs/client/client_fabric_client-key.pem
      #   certfile: path/to/tls/fabricca/certs/client/client_fabric_client.pem


    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org1

  ca-org2:
    url: https://ca.org2.example.com:7054
    httpOptions:
      verify: false
    tlsCACerts:
      pem: "CA_ORG2_TLS"
    registrar:
    - enrollId: admin
      enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org2

#  ca-org3:
#    url: https://ca.org3.example.com:7054
#    httpOptions:
#      verify: false
#    tlsCACerts:
#      pem: "CA_ORG3_TLS"
#    registrar:
#    - enrollId: admin
#      enrollSecret: adminpw
#    # [Optional] The optional name of the CA.
#    caName: ca-org3
